version: '3.8'

services:
  chat-server-protected:
    build:
      context: .
      dockerfile: Dockerfile.cloudflared
    image: end2end-chat-server-cloudflared:latest
    container_name: chat-server-cloudflared
    restart: unless-stopped
    
    # Environment variables
    environment:
      # Server configuration
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - SERVER_PASSWORD=${SERVER_PASSWORD:-}
      - RATE_LIMIT_ENABLED=true
      - DISABLE_CONNECTION_LIMIT=false
      
      # Cloudflare tunnel configuration
      - CLOUDFLARE_ENABLED=true
      - CLOUDFLARE_TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN:-}
      - TRUST_PROXY=true
      
      # Security settings
      - TOR_ENABLED=false
      - DB_BACKEND=sqlite
      
    # Port mapping (only for development/debugging)
    ports:
      - "8080:8080"   # HTTP (will be protected by Cloudflare)
      - "8443:8443"   # HTTPS (will be protected by Cloudflare)
      - "8090:8090"   # Cloudflared metrics (internal only)
    
    # Volume mounts for persistent data
    volumes:
      # Cloudflare tunnel configuration
      - cloudflared-config:/etc/cloudflared
      - cloudflared-logs:/var/log/cloudflared
      
      # Application data
      - chat-data:/app/data
      - chat-logs:/app/logs
      
      # Optional: Mount your tunnel credentials
      # - ./cloudflare/cert.pem:/etc/cloudflared/cert.pem:ro
      # - ./cloudflare/config.yml:/etc/cloudflared/config.yml:ro
    
    # Resource limits for security
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security settings
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - DAC_OVERRIDE
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Networks
    networks:
      - chat-network
      - cloudflare-network

  # Redis service for caching and presence
  redis:
    image: redis:7-alpine
    container_name: chat-redis
    restart: unless-stopped
    
    # Redis configuration
    command: >
      redis-server
      --appendonly yes
      --bind 0.0.0.0
      --port 6379
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    # Volume for Redis data persistence
    volumes:
      - redis-data:/data
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Security
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    
    # Networks
    networks:
      - chat-network

  # Cloudflare tunnel monitoring (optional)
  tunnel-monitor:
    build:
      context: .
      dockerfile: Dockerfile.cloudflared
    image: end2end-chat-server-cloudflared:latest
    container_name: tunnel-monitor
    restart: unless-stopped
    
    # Override entrypoint for monitoring
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      while true; do
        if ! pgrep cloudflared > /dev/null; then
          echo '[MONITOR] Cloudflare tunnel not running, checking chat server...'
          if ! curl -f http://chat-server-protected:8080/health; then
            echo '[MONITOR] Chat server health check failed'
          fi
        fi
        sleep 60
      done
      "
    
    environment:
      - MONITOR_ONLY=true
    
    # Dependencies
    depends_on:
      - chat-server-protected
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
    
    # Networks
    networks:
      - chat-network
      - cloudflare-network

# Named volumes for data persistence
volumes:
  cloudflared-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./cloudflare
  
  cloudflared-logs:
    driver: local
  
  chat-data:
    driver: local
  
  chat-logs:
    driver: local
  
  redis-data:
    driver: local

# Networks
networks:
  chat-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  cloudflare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
