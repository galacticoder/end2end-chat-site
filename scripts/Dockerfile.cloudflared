# Enhanced Dockerfile with Cloudflare Tunnel DDoS Protection
FROM node:20-bullseye-slim

# Install system dependencies including Redis, cloudflared, and build tools
RUN apt-get update && apt-get install -y \
    dumb-init \
    sudo \
    curl \
    wget \
    gnupg \
    lsb-release \
    redis-server \
    build-essential \
    python3 \
    make \
    g++ \
    systemctl \
    cron \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install cloudflared
RUN curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null && \
    echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared bullseye main' | tee /etc/apt/sources.list.d/cloudflared.list && \
    apt-get update && \
    apt-get install -y cloudflared && \
    rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN groupadd --gid 1001 nodejs && \
    useradd --uid 1001 --gid nodejs --shell /bin/bash --create-home nodejs \
    && echo "nodejs ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Create cloudflared user and directories
RUN useradd --system --home-dir /var/lib/cloudflared --shell /bin/false cloudflared && \
    mkdir -p /etc/cloudflared /var/log/cloudflared /var/lib/cloudflared /opt/cloudflared && \
    chown -R cloudflared:cloudflared /var/lib/cloudflared /var/log/cloudflared && \
    chmod 755 /etc/cloudflared /var/log/cloudflared

# Install Node.js and pnpm
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g pnpm@8.10.0

# Set working directory and copy package files first
WORKDIR /app
COPY config/package.json config/pnpm-lock.yaml ./
COPY server/package*.json ./server/

# Install main project dependencies
RUN pnpm install --frozen-lockfile --prod && \
    cd server && npm install --only=production && cd ..

# Copy application source code
COPY --chown=nodejs:nodejs server/ ./server/
COPY --chown=nodejs:nodejs src/ ./src/
COPY --chown=nodejs:nodejs cloudflare/ ./cloudflare/
COPY --chown=nodejs:nodejs startServer.sh ./
COPY --chown=nodejs:nodejs startServerWithCloudflared.sh ./
COPY --chown=nodejs:nodejs setup-cloudflared.sh ./
COPY --chown=nodejs:nodejs index.html ./
COPY --chown=nodejs:nodejs server/package.json ./package.json

# Create container startup script
COPY --chown=nodejs:nodejs <<'EOF' /app/start-container.sh
#!/bin/bash

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[CONTAINER]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[CONTAINER]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[CONTAINER]${NC} $1"
}

log_error() {
    echo -e "${RED}[CONTAINER]${NC} $1"
}

# Start Redis
start_redis() {
    log_info "Starting Redis server..."
    redis-server --daemonize yes --bind 127.0.0.1 --port 6379
    sleep 2
    
    if redis-cli ping > /dev/null 2>&1; then
        log_success "Redis started successfully"
    else
        log_error "Failed to start Redis"
        exit 1
    fi
}

# Setup Cloudflare tunnel if credentials are provided
setup_cloudflare_tunnel() {
    if [[ -n "${CLOUDFLARE_TUNNEL_TOKEN:-}" ]]; then
        log_info "Setting up Cloudflare tunnel with provided token..."
        
        # Create tunnel configuration from token
        mkdir -p /etc/cloudflared
        cloudflared tunnel --config /dev/null --origincert /dev/null --token "$CLOUDFLARE_TUNNEL_TOKEN" --url http://localhost:8080 &
        
        log_success "Cloudflare tunnel started with token"
        return 0
    fi
    
    if [[ -f "/etc/cloudflared/config.yml" && -f "/etc/cloudflared/cert.pem" ]]; then
        log_info "Starting Cloudflare tunnel with existing configuration..."
        
        # Start tunnel as background process
        cloudflared tunnel --config /etc/cloudflared/config.yml run &
        CLOUDFLARED_PID=$!
        
        # Wait for tunnel to initialize
        sleep 5
        
        if kill -0 $CLOUDFLARED_PID 2>/dev/null; then
            log_success "Cloudflare tunnel started successfully (PID: $CLOUDFLARED_PID)"
            echo $CLOUDFLARED_PID > /tmp/cloudflared.pid
        else
            log_error "Failed to start Cloudflare tunnel"
            return 1
        fi
    else
        log_warning "No Cloudflare tunnel configuration found"
        log_info "To enable DDoS protection, provide CLOUDFLARE_TUNNEL_TOKEN environment variable"
        log_info "or mount tunnel configuration files to /etc/cloudflared/"
    fi
}

# Cleanup function
cleanup() {
    log_info "Shutting down services..."
    
    # Stop cloudflared if running
    if [[ -f /tmp/cloudflared.pid ]]; then
        CLOUDFLARED_PID=$(cat /tmp/cloudflared.pid)
        if kill -0 $CLOUDFLARED_PID 2>/dev/null; then
            log_info "Stopping Cloudflare tunnel (PID: $CLOUDFLARED_PID)"
            kill $CLOUDFLARED_PID || true
        fi
    fi
    
    # Stop any background cloudflared processes
    pkill -f cloudflared || true
    
    log_info "Cleanup completed"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Main startup sequence
main() {
    log_info "Starting End-to-End Chat Server Container with DDoS Protection"
    
    # Start Redis
    start_redis
    
    # Setup Cloudflare tunnel if configured
    if [[ "${CLOUDFLARE_ENABLED:-true}" == "true" ]]; then
        setup_cloudflare_tunnel
    else
        log_warning "Cloudflare tunnel disabled (CLOUDFLARE_ENABLED=false)"
    fi
    
    # Set environment variables for server
    export CLOUDFLARE_TUNNEL=true
    export TRUST_PROXY=true
    export REDIS_URL=${REDIS_URL:-redis://127.0.0.1:6379}
    
    # Start the chat server
    log_info "Starting chat server..."
    exec node server/server.js
}

main "$@"
EOF

# Make scripts executable
RUN chmod +x /app/start-container.sh \
    && chmod +x /app/startServer.sh \
    && chmod +x /app/startServerWithCloudflared.sh \
    && chmod +x /app/setup-cloudflared.sh

# Switch to nodejs user for security
USER nodejs
ENV HOME=/home/nodejs

# Set environment variables for Docker environment
ENV SKIP_INSTALL=1
ENV SKIP_REBUILD=1
ENV DISABLE_CONNECTION_LIMIT=true
ENV REDIS_URL=redis://127.0.0.1:6379
ENV CLOUDFLARE_ENABLED=true
ENV TRUST_PROXY=true

# Create volume mounts for persistent data
VOLUME ["/etc/cloudflared", "/var/log/cloudflared"]

# Expose ports for HTTP, HTTPS, and cloudflared metrics
EXPOSE 8080 8443 8090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start with container script
CMD ["/app/start-container.sh"]
